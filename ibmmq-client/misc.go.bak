type message struct {
	Greeting string `json:"greeting"`
	Value    int    `json:"value"`
}

msgData := &message{
    Greeting: "Hello from Go at " + time.Now().Format(time.RFC3339),
    Value:    rand.Intn(100),
}

data, err := json.Marshal(msgData)
if err != nil {
    logger.Println("Error marshalling data to send")
    return
}



buffer := make([]byte, 1024)
datalen, err := qObj.Get(gmd, gmo, buffer)
if err != nil {
    msgAvail = false

} else {
    logger.Printf("Got message length: %d\n", datalen)
}


func receiveMessage(qObj ibmmq.MQObject) {

	logger.Println("Getting message from Queue ...")

	var msgAvail = true
	var err error

	for msgAvail == true && err == nil {
		var datalen int

		// Message Descriptor (MQMD) and Get Options (MQPMO)
		gmd := ibmmq.NewMQMD()
		gmo := ibmmq.NewMQGMO()

		gmo.Options = ibmmq.MQGMO_NO_SYNCPOINT
		gmo.Options |= ibmmq.MQGMO_WAIT
		gmo.WaitInterval = 3 * 1000

		gmo.Options |= ibmmq.MQGMO_PROPERTIES_IN_HANDLE
		gmo.MsgHandle = mh

		// The MQCBD structure is used to specify the function to be invoked
		// when a message arrives on a queue
		cbd := ibmmq.NewMQCBD()
		cbd.CallbackFunction = cb

	}

}

logger.Println("Retrieve Message from Queue...")
msgAvail := true

for msgAvail == true && err == nil {
	var datalen int

	// Message Descriptor (MQMD) and Get Options (MQPMO)
	gmd := ibmmq.NewMQMD()
	gmo := ibmmq.NewMQGMO()

	gmo.Options = ibmmq.MQGMO_NO_SYNCPOINT
	gmo.Options |= ibmmq.MQGMO_WAIT
	// gmo.WaitInterval = 3 * 1000

	buffer := make([]byte, 1024)
	datalen, err = qObj.Get(gmd, gmo, buffer)

	if err != nil {
		logger.Println(err)
		mqRet := err.(*ibmmq.MQReturn)
		msgAvail = false
		logger.Printf("return code %d, expected %d", mqRet.MQRC, ibmmq.MQRC_NO_MSG_AVAILABLE)

		if mqRet.MQRC == ibmmq.MQRC_NO_MSG_AVAILABLE {
			msgAvail = true
			err = nil
			logger.Println("No more messages right now")
		}
	} else {
		logger.Printf("Got message of length %d: ", datalen)
		logger.Println(strings.TrimSpace(string(buffer[:datalen])))
	}
}


		if useGetSlice {
			buffer := make([]byte, 0, 1024)
			buffer, datalen, err = qObj.GetSlice(gmd, gmo, buffer)

			if err != nil {
				logger.Println(err)
				msgAvail = false
				mqret := err.(*ibmmq.MQReturn)
				if mqret.MQRC == ibmmq.MQRC_NO_MSG_AVAILABLE {
					err = nil
				}
			} else {
				logger.Printf("Got message of length %d:", datalen)
				logger.Println(strings.TrimSpace(string(buffer)))
				gotMsg = true
			}

		} else {